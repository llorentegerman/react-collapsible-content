(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{gFqe:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return C})),t.d(n,"default",(function(){return h}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var o=t("ERkP"),a=t("/FXl"),r=t("TjRS"),l=t("ZFoC"),d=t("D9Iw"),c=t("75hS"),i=t("IT2Y"),u=t("hSUT"),p=t("VzbV"),s=t("+Ku7"),m=t("uBK/");t("aD51");function b(){return(b=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var C={};void 0!==C&&C&&C===Object(C)&&Object.isExtensible(C)&&!C.hasOwnProperty("__filemeta")&&Object.defineProperty(C,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/examples/DynamicContent.mdx"}});var y={_frontmatter:C},f=r.a;function h(e){var n,t,h=e.components,x=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(a.b)(f,b({},y,x,{components:h,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"dynamic-content"},"Dynamic Content"),Object(a.b)("p",null,"See how the component behaves when it has dynamic content.\nIn ",Object(a.b)("a",b({parentName:"p"},{href:"/react-collapsible-content/comparisons"}),"comparisons")," section you will see how other libraries reacts to the same content."),Object(a.b)("p",null,"See ",Object(a.b)("a",b({parentName:"p"},{href:"#countdowncomponent"}),"CountdownComponent")," and ",Object(a.b)("a",b({parentName:"p"},{href:"#dynamicchildren"}),"DynamicChildren")," definitions below."),Object(a.b)("h2",{id:"only-child"},"Only child"),Object(a.b)("p",null,"See how the component reacts when the content of its only child changes."),Object(a.b)(l.c,{__position:0,__code:"() => {\n  const [expanded, setExpanded] = React.useState(true)\n  return (\n    <Column>\n      <p>\n        Content will change in: <CountdownComponent delay={5000} /> seconds\n        (refresh to restart).\n      </p>\n      <Column style={{ maxWidth: 600, width: '100%' }}>\n        <ToggleButtonComponent\n          expanded={expanded}\n          onClick={() => setExpanded(prev => !prev)}\n        />\n        <CollapsibleContent expanded={expanded}>\n          <DynamicText delay={5000} />\n        </CollapsibleContent>\n      </Column>\n    </Column>\n  )\n}",__scope:(n={props:x,DefaultLayout:r.a,Playground:l.c,Props:l.d,Code:d.a,Column:c.Column,CollapsibleContent:i.a,ToggleButtonComponent:u.a,DynamicText:p.a,DynamicChildren:s.a,CountdownComponent:m.a},n.DefaultLayout=r.a,n._frontmatter=C,n),mdxType:"Playground"},(function(){var e=o.useState(!0),n=e[0],t=e[1];return Object(a.b)(c.Column,{mdxType:"Column"},Object(a.b)("p",null,"Content will change in: ",Object(a.b)(m.a,{delay:5e3,mdxType:"CountdownComponent"})," ","seconds (refresh to restart)."),Object(a.b)(c.Column,{style:{maxWidth:600,width:"100%"},mdxType:"Column"},Object(a.b)(u.a,{expanded:n,onClick:function(){return t((function(e){return!e}))},mdxType:"ToggleButtonComponent"}),Object(a.b)(i.a,{expanded:n,mdxType:"CollapsibleContent"},Object(a.b)(p.a,{delay:5e3,mdxType:"DynamicText"}))))})),Object(a.b)("h2",{id:"multiple-children"},"Multiple children"),Object(a.b)("p",null,"See how the component reacts when new children are added."),Object(a.b)(l.c,{__position:1,__code:"() => {\n  const [expanded, setExpanded] = React.useState(true)\n  return (\n    <Column>\n      <p>\n        Content will change in: <CountdownComponent delay={5000} /> seconds\n        (refresh to restart).\n      </p>\n      <Column style={{ maxWidth: 600, width: '100%' }}>\n        <ToggleButtonComponent\n          expanded={expanded}\n          onClick={() => setExpanded(prev => !prev)}\n        />\n        <CollapsibleContent expanded={expanded}>\n          <DynamicChildren init={3} end={10} delay={5000} />\n        </CollapsibleContent>\n      </Column>\n    </Column>\n  )\n}",__scope:(t={props:x,DefaultLayout:r.a,Playground:l.c,Props:l.d,Code:d.a,Column:c.Column,CollapsibleContent:i.a,ToggleButtonComponent:u.a,DynamicText:p.a,DynamicChildren:s.a,CountdownComponent:m.a},t.DefaultLayout=r.a,t._frontmatter=C,t),mdxType:"Playground"},(function(){var e=o.useState(!0),n=e[0],t=e[1];return Object(a.b)(c.Column,{mdxType:"Column"},Object(a.b)("p",null,"Content will change in: ",Object(a.b)(m.a,{delay:5e3,mdxType:"CountdownComponent"})," ","seconds (refresh to restart)."),Object(a.b)(c.Column,{style:{maxWidth:600,width:"100%"},mdxType:"Column"},Object(a.b)(u.a,{expanded:n,onClick:function(){return t((function(e){return!e}))},mdxType:"ToggleButtonComponent"}),Object(a.b)(i.a,{expanded:n,mdxType:"CollapsibleContent"},Object(a.b)(s.a,{init:3,end:10,delay:5e3,mdxType:"DynamicChildren"}))))})),Object(a.b)("h2",{id:"countdowncomponent"},"CountdownComponent"),Object(a.b)(d.a,{className:"tsx",mdxType:"Code"},"\nimport React, { useEffect, useRef, useState } from 'react';\nexport default function CountdownComponent({ delay }) {\n    const [counter, setCounter] = useState(delay / 1000);\n    const intervalRef = useRef();\n    useEffect(() => {\n        let mounted = true;\n        const endDate = new Date().getTime() + delay;\n        intervalRef.current = setInterval(() => {\n            let diff =\n                (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n            diff = Math.floor(diff);\n            if (diff <= 0) {\n                clearInterval(intervalRef.current);\n            }\n            setCounter(diff);\n        }, 1000);\n        setTimeout(() => {\n            if (!mounted) {\n                return;\n            }\n            clearInterval(intervalRef.current);\n        }, delay);\n        return () => {\n            mounted = false;\n            clearInterval(intervalRef.current);\n        };\n    }, [delay]);\n    return <span>{counter}</span>;\n}\n "),Object(a.b)("h2",{id:"dynamicchildren"},"DynamicChildren"),Object(a.b)(d.a,{className:"tsx",mdxType:"Code"},"\nimport React, { useEffect, useState } from 'react';\nconst getArray = (count) => new Array(count).fill().map((_, i) => i + 1);\nexport default function DynamicChildren({ delay = 2000, init = 3, end = 5 }) {\n    const [array, setArray] = useState(getArray(init));\n    useEffect(() => {\n        let mounted = true;\n        setTimeout(() => {\n            if (!mounted) {\n                return;\n            }\n            setArray(getArray(end));\n        }, delay);\n        return () => {\n            mounted = false;\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [delay]);\n    return (\n        <React.Fragment>\n            {array.map((i) => (\n                <div\n                    style={{ backgroundColor: '#2EBFA5', color: 'white' }}\n                    key={i}\n                >\n                    {i}\n                </div>\n            ))}\n        </React.Fragment>\n    );\n}\n"))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/examples/DynamicContent.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-examples-dynamic-content-mdx-9fe64f6f3b8e9fa4d482.js.map