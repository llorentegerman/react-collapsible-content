(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{EJc3:function(t,n,e){"use strict";e.r(n),e.d(n,"_frontmatter",(function(){return b})),e.d(n,"default",(function(){return p}));e("5hJT"),e("W1QL"),e("K/PF"),e("t91x"),e("75LO"),e("PJhk");var o=e("ERkP"),r=e("/FXl"),i=e("TjRS"),a=e("ZFoC"),s=e("IT2Y"),l=e("sBQL");e("aD51");function c(){return(c=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/useScrollHeight.mdx"}});var h={_frontmatter:b},u=i.a;function p(t){var n,e=t.components,p=function(t,n){if(null==t)return{};var e,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)e=i[o],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,["components"]);return Object(r.b)(u,c({},h,p,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"usescrollheight"},"useScrollHeight"),Object(r.b)("h2",{id:"properties"},"Properties"),Object(r.b)(a.d,{of:l.a,mdxType:"Props"}),Object(r.b)("h2",{id:"how-to-import"},"How to import"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-js"}),"import { useScrollHeight } from 'react-collapsible-content';\n")),Object(r.b)("h2",{id:"basic-usage"},"Basic usage"),Object(r.b)(a.c,{__position:1,__code:"() => {\n  const contentContainerRef = React.useRef(null)\n  const { scrollHeight } = useScrollHeight(contentContainerRef, {\n    onTransitionStart: () => console.log('transition has started'),\n    onTransitionEnd: () => console.log('transition is over'),\n  })\n  return (\n    <div ref={contentContainerRef}>\n      This can be any component that will change height at some point. At that\n      moment <b>scrollHeight</b> will contain the new height value, and in\n      case the component has set a transition, the events{' '}\n      <b>onTransitionStart</b> and <b>onTransitionEnd</b> will warn us when it\n      starts and ends respectively.\n      <br />\n      At this moment scrollHeight: <b>{scrollHeight}px</b> (try resizing the\n      window).\n    </div>\n  )\n}",__scope:(n={props:p,DefaultLayout:i.a,Playground:a.c,Props:a.d,useScrollHeight:s.b,useScrollHeightProps:l.a},n.DefaultLayout=i.a,n._frontmatter=b,n),mdxType:"Playground"},(function(){var t=o.useRef(null),n=Object(s.b)(t,{onTransitionStart:function(){return console.log("transition has started")},onTransitionEnd:function(){return console.log("transition is over")}}).scrollHeight;return Object(r.b)("div",{ref:t},"This can be any component that will change height at some point. At that moment ",Object(r.b)("b",null,"scrollHeight")," will contain the new height value, and in case the component has set a transition, the events ",Object(r.b)("b",null,"onTransitionStart")," and ",Object(r.b)("b",null,"onTransitionEnd")," will warn us when it starts and ends respectively.",Object(r.b)("br",null),"At this moment scrollHeight: ",Object(r.b)("b",null,n,"px")," (try resizing the window).")})))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/useScrollHeight.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-use-scroll-height-mdx-370b9cdaf2d62b46ecab.js.map