{"version":3,"sources":["webpack:///../src/components/useScrollHeight.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","useScrollHeightProps","parentName","__position","__code","__scope","Playground","Props","useScrollHeight","contentContainerRef","React","scrollHeight","onTransitionStart","console","log","onTransitionEnd","ref","isMDXComponent"],"mappings":"whBASO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAsBF,QAAQ,UACzC,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,gBADZ,mEAIL,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2wBAAkxBC,SAAO,GAC1zBP,QACAH,kBACAW,eACAC,UACAC,oBACAP,0BAN0zB,gBAO1zBN,IAP0zB,EAQ1zBH,eAR0zB,GASzzBO,QAAQ,eACV,WACG,IAAMU,EAAsBC,SAAa,MAEvCC,EACEH,YAAgBC,EAAqB,CACvCG,kBAAmB,kBAAMC,QAAQC,IAAI,2BACrCC,gBAAiB,kBAAMF,QAAQC,IAAI,yBAHnCH,aAKF,OAAO,mBAAKK,IAAKP,GAAV,mFAEgB,qCAFhB,kGAIQ,0CAJR,QAIqC,wCAJrC,sDAMC,uBAND,gCAO8B,qBAAIE,EAAJ,MAP9B,wC,kNAgBff,EAAWqB,gBAAiB","file":"component---src-components-use-scroll-height-mdx-370b9cdaf2d62b46ecab.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/llorentegerman/Documents/code/otros/react-collapsible-content/docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useScrollHeight } from 'react-collapsible-content';\nimport useScrollHeightProps from './useScrollHeightProps';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usescrollheight\"\n    }}>{`useScrollHeight`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={useScrollHeightProps} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"how-to-import\"\n    }}>{`How to import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useScrollHeight } from 'react-collapsible-content';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const contentContainerRef = React.useRef(null)\\n  const { scrollHeight } = useScrollHeight(contentContainerRef, {\\n    onTransitionStart: () => console.log(\\'transition has started\\'),\\n    onTransitionEnd: () => console.log(\\'transition is over\\'),\\n  })\\n  return (\\n    <div ref={contentContainerRef}>\\n      This can be any component that will change height at some point. At that\\n      moment <b>scrollHeight</b> will contain the new height value, and in\\n      case the component has set a transition, the events{\\' \\'}\\n      <b>onTransitionStart</b> and <b>onTransitionEnd</b> will warn us when it\\n      starts and ends respectively.\\n      <br />\\n      At this moment scrollHeight: <b>{scrollHeight}px</b> (try resizing the\\n      window).\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useScrollHeight,\n      useScrollHeightProps,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    {() => {\n        const contentContainerRef = React.useRef(null);\n        const {\n          scrollHeight\n        } = useScrollHeight(contentContainerRef, {\n          onTransitionStart: () => console.log('transition has started'),\n          onTransitionEnd: () => console.log('transition is over')\n        });\n        return <div ref={contentContainerRef}>\n                This can be any component that will change height at some point.\n                At that moment <b>scrollHeight</b> will contain the new height\n                value, and in case the component has set a transition, the\n                events <b>onTransitionStart</b> and <b>onTransitionEnd</b> will\n                warn us when it starts and ends respectively.\n                <br />\n                At this moment scrollHeight: <b>{scrollHeight}px</b> (try\n                resizing the window).\n            </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}