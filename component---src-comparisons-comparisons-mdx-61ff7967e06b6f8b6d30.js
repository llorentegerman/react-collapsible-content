(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{krwU:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return O}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var o=n("ERkP"),a=n("/FXl"),l=n("TjRS"),c=n("ZFoC"),r=n("75hS"),p=n("IT2Y"),s=n("eNxT"),i=n("hSUT"),b=n("VzbV"),m=n("uBK/");n("aD51");function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}n("ob/T");var u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/comparisons/comparisons.mdx"}});var h={_frontmatter:u},j=l.a;function O(e){var t,n=e.components,O=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(a.b)(j,d({},h,O,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"comparisons"},"Comparisons"),Object(a.b)("p",null,"In this section we will make some comparisons with the most popular libraries in npm."),Object(a.b)("p",null,"See the difference in how both components transition to the new height."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"react-collapsible-content")," transitions smoothly, while ",Object(a.b)("strong",{parentName:"p"},"others")," jumps directly to the new height."),Object(a.b)("h2",{id:"how-to-import"},"How to import"),Object(a.b)("pre",null,Object(a.b)("code",d({parentName:"pre"},{className:"language-js"}),"import CollapsibleContent from 'react-collapsible-content';\n")),Object(a.b)("h2",{id:"rc-collapse"},"rc-collapse"),Object(a.b)("p",null,"In ",Object(a.b)("a",d({parentName:"p"},{href:"https://www.npmjs.com/package/rc-collapse"}),"rc-collapse")," transition is activated when onClick and deactivated when transition ends. That is why you don't see animations when content changes."),Object(a.b)(c.c,{__position:0,__code:'() => {\n  const [expanded, setExpanded] = React.useState(true)\n  const styles = {\n    container: { maxWidth: 800, width: \'100%\' },\n  }\n  return (\n    <Column style={styles.container}>\n      <p>\n        Content will change in: <CountdownComponent delay={5000} /> seconds\n        (refresh to restart).\n      </p>\n      <Row horizontal="space-between">\n        <Column flexGrow={1} style={{ maxWidth: 375 }}>\n          <ToggleButtonComponent\n            expanded={expanded}\n            onClick={() => setExpanded(prev => !prev)}\n            title="Toggle: react-collapsible-content"\n          />\n          <CollapsibleContent transitionDuration=".600s" expanded={expanded}>\n            <DynamicText delay={5000} />\n          </CollapsibleContent>\n        </Column>\n        <Column flexGrow={1} style={{ maxWidth: 375 }}>\n          <Collapse\n            activeKey={[expanded ? \'1\' : \'\']}\n            onChange={() => setExpanded(prev => !prev)}\n            accordion={true}\n          >\n            <Panel key="1" header="Toggle: rc-collapse">\n              <DynamicText delay={5000} />\n            </Panel>\n          </Collapse>\n        </Column>\n      </Row>\n    </Column>\n  )\n}',__scope:(t={props:O,DefaultLayout:l.a,Playground:c.c,Column:r.Column,Row:r.Row,CollapsibleContent:p.a,Collapse:s.b,Panel:s.a,ToggleButtonComponent:i.a,DynamicText:b.a,CountdownComponent:m.a},t.DefaultLayout=l.a,t._frontmatter=u,t),mdxType:"Playground"},(function(){var e=o.useState(!0),t=e[0],n=e[1];return Object(a.b)(r.Column,{style:{maxWidth:800,width:"100%"},mdxType:"Column"},Object(a.b)("p",null,"Content will change in: ",Object(a.b)(m.a,{delay:5e3,mdxType:"CountdownComponent"})," ","seconds (refresh to restart)."),Object(a.b)(r.Row,{horizontal:"space-between",mdxType:"Row"},Object(a.b)(r.Column,{flexGrow:1,style:{maxWidth:375},mdxType:"Column"},Object(a.b)(i.a,{expanded:t,onClick:function(){return n((function(e){return!e}))},title:"Toggle: react-collapsible-content",mdxType:"ToggleButtonComponent"}),Object(a.b)(p.a,{transitionDuration:".600s",expanded:t,mdxType:"CollapsibleContent"},Object(a.b)(b.a,{delay:5e3,mdxType:"DynamicText"}))),Object(a.b)(r.Column,{flexGrow:1,style:{maxWidth:375},mdxType:"Column"},Object(a.b)(s.b,{activeKey:[t?"1":""],onChange:function(){return n((function(e){return!e}))},accordion:!0,mdxType:"Collapse"},Object(a.b)(s.a,{key:"1",header:"Toggle: rc-collapse",mdxType:"Panel"},Object(a.b)(b.a,{delay:5e3,mdxType:"DynamicText"}))))))})),Object(a.b)("h2",{id:"react-collapse"},"react-collapse"),Object(a.b)("p",null,"In ",Object(a.b)("a",d({parentName:"p"},{href:"https://www.npmjs.com/package/react-collapse"}),"react-collapse")," ",Object(a.b)("strong",{parentName:"p"},"height: auto;")," by default when it's expanded, that is why you don't see any transition after children changes. When it changes to collapsed ",Object(a.b)("strong",{parentName:"p"},"height")," is set to 0px and when it changes to expanded ",Object(a.b)("strong",{parentName:"p"},"height")," is set to the current ",Object(a.b)("strong",{parentName:"p"},"height")," of the component (i.e.: 280px), and when transitions end ",Object(a.b)("strong",{parentName:"p"},"height")," is set to ",Object(a.b)("strong",{parentName:"p"},"auto")," again."),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Note"),": transitions doesn't work when ",Object(a.b)("strong",{parentName:"p"},"height")," is set to ",Object(a.b)("strong",{parentName:"p"},"auto"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"coming soon")),Object(a.b)("h2",{id:"react-collapsible"},"react-collapsible"),Object(a.b)("p",null,"In ",Object(a.b)("a",d({parentName:"p"},{href:"https://www.npmjs.com/package/react-collapsible"}),"react-collapsible")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"coming soon")))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/comparisons/comparisons.mdx"}}),O.isMDXComponent=!0},"ob/T":function(e,t,n){}}]);
//# sourceMappingURL=component---src-comparisons-comparisons-mdx-61ff7967e06b6f8b6d30.js.map