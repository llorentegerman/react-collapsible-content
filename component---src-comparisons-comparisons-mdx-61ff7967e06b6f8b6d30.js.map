{"version":3,"sources":["webpack:///../src/comparisons/comparisons.mdx"],"names":["require","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Column","Row","CollapsibleContent","Collapse","Panel","ToggleButtonComponent","DynamicText","CountdownComponent","React","expanded","setExpanded","style","maxWidth","width","delay","horizontal","flexGrow","onClick","prev","title","transitionDuration","activeKey","onChange","accordion","key","header","isMDXComponent"],"mappings":"wkBAWAA,EAAQ,QAMD,IAAMC,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,eADR,eAGA,8GACA,gGACA,qBAAG,sBAAQC,WAAW,KAAnB,6BAAH,gCAAiG,sBAAQA,WAAW,KAAnB,UAAjG,sCACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kEAIL,iBAAQ,CACN,GAAM,eADR,eAGA,2BAAU,mBAAGA,WAAW,KAAQ,CAC5B,KAAQ,8CADF,eAAV,0IAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,msCAA8sCC,SAAO,GACtvCL,QACAH,kBACAS,eACAC,gBACAC,UACAC,uBACAC,aACAC,UACAC,0BACAC,gBACAC,wBAXsvC,gBAYtvCjB,IAZsvC,EAatvCH,eAbsvC,GAcrvCO,QAAQ,eACV,WAAM,MAC6Bc,YAAe,GAAxCC,EADJ,KACcC,EADd,KAQH,OAAO,YAAC,SAAD,CAAQC,MALF,CACTC,SAAU,IACVC,MAAO,QAG6BnB,QAAQ,UACxC,gDAC4B,YAAC,IAAD,CAAoBoB,MAAO,IAAMpB,QAAQ,uBAAwB,IAD7F,iCAIA,YAAC,MAAD,CAAKqB,WAAW,gBAAgBrB,QAAQ,OACpC,YAAC,SAAD,CAAQsB,SAAU,EAAGL,MAAO,CAClCC,SAAU,KACTlB,QAAQ,UACC,YAAC,IAAD,CAAuBe,SAAUA,EAAUQ,QAAS,kBAAMP,GAAY,SAAAQ,GAAI,OAAKA,MAAOC,MAAM,oCAAoCzB,QAAQ,0BACxI,YAAC,IAAD,CAAoB0B,mBAAmB,QAAQX,SAAUA,EAAUf,QAAQ,sBACvE,YAAC,IAAD,CAAaoB,MAAO,IAAMpB,QAAQ,kBAG1C,YAAC,SAAD,CAAQsB,SAAU,EAAGL,MAAO,CAClCC,SAAU,KACTlB,QAAQ,UACC,YAAC,IAAD,CAAU2B,UAAW,CAACZ,EAAW,IAAM,IAAKa,SAAU,kBAAMZ,GAAY,SAAAQ,GAAI,OAAKA,MAAOK,WAAW,EAAM7B,QAAQ,YAC7G,YAAC,IAAD,CAAO8B,IAAI,IAAIC,OAAO,sBAAsB/B,QAAQ,SAChD,YAAC,IAAD,CAAaoB,MAAO,IAAMpB,QAAQ,wBAQ9D,iBAAQ,CACN,GAAM,kBADR,kBAGA,2BAAU,mBAAGC,WAAW,KAAQ,CAC5B,KAAQ,iDADF,kBAAV,IAEgC,sBAAQA,WAAW,KAAnB,iBAFhC,iIAEmN,sBAAQA,WAAW,KAAnB,UAFnN,kDAEgT,sBAAQA,WAAW,KAAnB,UAFhT,0BAEqX,sBAAQA,WAAW,KAAnB,UAFrX,6DAE6d,sBAAQA,WAAW,KAAnB,UAF7d,cAEshB,sBAAQA,WAAW,KAAnB,QAFthB,WAGA,qBAAG,kBAAIA,WAAW,KAAf,QAAH,mCAAuE,sBAAQA,WAAW,KAAnB,UAAvE,cAAgI,sBAAQA,WAAW,KAAnB,QAAhI,KACA,qBAAG,sBAAQA,WAAW,KAAnB,gBACH,iBAAQ,CACN,GAAM,qBADR,qBAGA,2BAAU,mBAAGA,WAAW,KAAQ,CAC5B,KAAQ,oDADF,sBAGV,qBAAG,sBAAQA,WAAW,KAAnB,sB,+MAKPJ,EAAWmC,gBAAiB,G","file":"component---src-comparisons-comparisons-mdx-61ff7967e06b6f8b6d30.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/llorentegerman/Documents/code/otros/react-collapsible-content/docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Column, Row } from 'simple-flexbox';\nimport CollapsibleContent from 'react-collapsible-content';\nimport Collapse, { Panel } from 'rc-collapse';\n\nrequire('rc-collapse/assets/index.css'); // import { Collapse as ReactCollapse } from 'react-collapse';\n\n\nimport ToggleButtonComponent from '../examples/common/ToggleButtonComponent';\nimport DynamicText from '../examples/common/DynamicText';\nimport CountdownComponent from '../examples/common/CountdownComponent';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"comparisons\"\n    }}>{`Comparisons`}</h1>\n    <p>{`In this section we will make some comparisons with the most popular libraries in npm.`}</p>\n    <p>{`See the difference in how both components transition to the new height.`}</p>\n    <p><strong parentName=\"p\">{`react-collapsible-content`}</strong>{` transitions smoothly, while `}<strong parentName=\"p\">{`others`}</strong>{` jumps directly to the new height.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-import\"\n    }}>{`How to import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import CollapsibleContent from 'react-collapsible-content';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rc-collapse\"\n    }}>{`rc-collapse`}</h2>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/rc-collapse\"\n      }}>{`rc-collapse`}</a>{` transition is activated when onClick and deactivated when transition ends. That is why you don't see animations when content changes.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [expanded, setExpanded] = React.useState(true)\\n  const styles = {\\n    container: { maxWidth: 800, width: \\'100%\\' },\\n  }\\n  return (\\n    <Column style={styles.container}>\\n      <p>\\n        Content will change in: <CountdownComponent delay={5000} /> seconds\\n        (refresh to restart).\\n      </p>\\n      <Row horizontal=\\\"space-between\\\">\\n        <Column flexGrow={1} style={{ maxWidth: 375 }}>\\n          <ToggleButtonComponent\\n            expanded={expanded}\\n            onClick={() => setExpanded(prev => !prev)}\\n            title=\\\"Toggle: react-collapsible-content\\\"\\n          />\\n          <CollapsibleContent transitionDuration=\\\".600s\\\" expanded={expanded}>\\n            <DynamicText delay={5000} />\\n          </CollapsibleContent>\\n        </Column>\\n        <Column flexGrow={1} style={{ maxWidth: 375 }}>\\n          <Collapse\\n            activeKey={[expanded ? \\'1\\' : \\'\\']}\\n            onChange={() => setExpanded(prev => !prev)}\\n            accordion={true}\\n          >\\n            <Panel key=\\\"1\\\" header=\\\"Toggle: rc-collapse\\\">\\n              <DynamicText delay={5000} />\\n            </Panel>\\n          </Collapse>\\n        </Column>\\n      </Row>\\n    </Column>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Column,\n      Row,\n      CollapsibleContent,\n      Collapse,\n      Panel,\n      ToggleButtonComponent,\n      DynamicText,\n      CountdownComponent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    {() => {\n        const [expanded, setExpanded] = React.useState(true);\n        const styles = {\n          container: {\n            maxWidth: 800,\n            width: '100%'\n          }\n        };\n        return <Column style={styles.container} mdxType=\"Column\">\n                <p>\n                    Content will change in: <CountdownComponent delay={5000} mdxType=\"CountdownComponent\" />{' '}\n                    seconds (refresh to restart).\n                </p>\n                <Row horizontal='space-between' mdxType=\"Row\">\n                    <Column flexGrow={1} style={{\n              maxWidth: 375\n            }} mdxType=\"Column\">\n                        <ToggleButtonComponent expanded={expanded} onClick={() => setExpanded(prev => !prev)} title='Toggle: react-collapsible-content' mdxType=\"ToggleButtonComponent\" />\n                        <CollapsibleContent transitionDuration='.600s' expanded={expanded} mdxType=\"CollapsibleContent\">\n                            <DynamicText delay={5000} mdxType=\"DynamicText\" />\n                        </CollapsibleContent>\n                    </Column>\n                    <Column flexGrow={1} style={{\n              maxWidth: 375\n            }} mdxType=\"Column\">\n                        <Collapse activeKey={[expanded ? '1' : '']} onChange={() => setExpanded(prev => !prev)} accordion={true} mdxType=\"Collapse\">\n                            <Panel key='1' header='Toggle: rc-collapse' mdxType=\"Panel\">\n                                <DynamicText delay={5000} mdxType=\"DynamicText\" />\n                            </Panel>\n                        </Collapse>\n                    </Column>\n                </Row>\n            </Column>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"react-collapse\"\n    }}>{`react-collapse`}</h2>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/react-collapse\"\n      }}>{`react-collapse`}</a>{` `}<strong parentName=\"p\">{`height: auto;`}</strong>{` by default when it's expanded, that is why you don't see any transition after children changes. When it changes to collapsed `}<strong parentName=\"p\">{`height`}</strong>{` is set to 0px and when it changes to expanded `}<strong parentName=\"p\">{`height`}</strong>{` is set to the current `}<strong parentName=\"p\">{`height`}</strong>{` of the component (i.e.: 280px), and when transitions end `}<strong parentName=\"p\">{`height`}</strong>{` is set to `}<strong parentName=\"p\">{`auto`}</strong>{` again.`}</p>\n    <p><em parentName=\"p\">{`Note`}</em>{`: transitions doesn't work when `}<strong parentName=\"p\">{`height`}</strong>{` is set to `}<strong parentName=\"p\">{`auto`}</strong>{`.`}</p>\n    <p><strong parentName=\"p\">{`coming soon`}</strong></p>\n    <h2 {...{\n      \"id\": \"react-collapsible\"\n    }}>{`react-collapsible`}</h2>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/react-collapsible\"\n      }}>{`react-collapsible`}</a></p>\n    <p><strong parentName=\"p\">{`coming soon`}</strong></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}