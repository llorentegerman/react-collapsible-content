{"version":3,"sources":["webpack:///../src/examples/Unmount.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Code","Column","CollapsibleContent","ToggleButtonComponent","TextComponent","React","expanded","setExpanded","transitioningRef","transitionStatus","setTransitionStatus","isMounted","current","style","marginBottom","maxWidth","width","onClick","prev","onTransitionStart","onTransitionEnd","isMDXComponent"],"mappings":"6jBAYO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,qFACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,mqCAAgrCC,SAAO,GACxtCJ,QACAH,kBACAQ,eACAC,UACAC,SACAC,gBACAC,uBACAC,0BACAC,mBATwtC,gBAUxtCd,IAVwtC,EAWxtCH,eAXwtC,GAYvtCO,QAAQ,eACV,WAAM,MAC6BW,YAAe,GAAxCC,EADJ,KACcC,EADd,KAEGC,EAAmBH,UAAa,GAFnC,EAG6CA,WAAe,uBAAxDI,EAHJ,KAGsBC,EAHtB,KAIGC,EAAYL,GAAYE,EAAiBI,QAC/C,OAAO,YAAC,SAAD,CAAQlB,QAAQ,UACf,mBAAKmB,MAAO,CAChBC,aAAc,KAEN,4CACuB,IADvB,IAC4B,qBAAIL,GAC5B,uBAFJ,cAGgB,IAHhB,IAGqB,qBAAIE,EAAY,MAAQ,QAGjD,YAAC,SAAD,CAAQE,MAAO,CACnBE,SAAU,IACVC,MAAO,QACNtB,QAAQ,UACD,YAAC,IAAD,CAAuBY,SAAUA,EAAUW,QAAS,WAC1DT,EAAiBI,SAAU,EAC3BL,GAAY,SAAAW,GAAI,OAAKA,MACpBxB,QAAQ,0BACH,YAAC,IAAD,CAAoBY,SAAUA,EAAUa,kBAAmB,kBAAMT,EAAoB,gBAAgBU,gBAAiB,WAC5HZ,EAAiBI,SAAU,EAC3BF,EAAoB,YACnBhB,QAAQ,sBACEiB,EAAY,YAAC,IAAD,CAAejB,QAAQ,kBAAqB,oC,wMAUjFH,EAAW8B,gBAAiB","file":"component---src-examples-unmount-mdx-5cbb42f06d44feb05970.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/llorentegerman/Documents/code/otros/react-collapsible-content/docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Code } from 'gatsby-theme-docz/src/components/Code';\nimport { Column } from 'simple-flexbox';\nimport CollapsibleContent from 'react-collapsible-content';\nimport ToggleButtonComponent from './common/ToggleButtonComponent';\nimport TextComponent from './common/TextComponent';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"unmount-on-collapse\"\n    }}>{`Unmount On Collapse`}</h1>\n    <p>{`In case you need to unmount the content when it's collapsed.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [expanded, setExpanded] = React.useState(false)\\n  const transitioningRef = React.useRef(false)\\n  const [transitionStatus, setTransitionStatus] = React.useState(\\n    \\'has not yet started\\',\\n  )\\n  const isMounted = expanded || transitioningRef.current\\n  return (\\n    <Column>\\n      <div style={{ marginBottom: 10 }}>\\n        <div>\\n          Transition status: <b>{transitionStatus}</b>\\n          <br />\\n          Is mounted? <b>{isMounted ? \\'Yes\\' : \\'No\\'}</b>\\n        </div>\\n      </div>\\n      <Column style={{ maxWidth: 600, width: \\'100%\\' }}>\\n        <ToggleButtonComponent\\n          expanded={expanded}\\n          onClick={() => {\\n            transitioningRef.current = true\\n            setExpanded(prev => !prev)\\n          }}\\n        />\\n        <CollapsibleContent\\n          expanded={expanded}\\n          onTransitionStart={() => setTransitionStatus(\\'has started\\')}\\n          onTransitionEnd={() => {\\n            transitioningRef.current = false\\n            setTransitionStatus(\\'is over\\')\\n          }}\\n        >\\n          {isMounted ? <TextComponent /> : <div></div>}\\n        </CollapsibleContent>\\n      </Column>\\n    </Column>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Code,\n      Column,\n      CollapsibleContent,\n      ToggleButtonComponent,\n      TextComponent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    {() => {\n        const [expanded, setExpanded] = React.useState(false);\n        const transitioningRef = React.useRef(false);\n        const [transitionStatus, setTransitionStatus] = React.useState('has not yet started');\n        const isMounted = expanded || transitioningRef.current;\n        return <Column mdxType=\"Column\">\n                <div style={{\n            marginBottom: 10\n          }}>\n                    <div>\n                        Transition status:{' '} <b>{transitionStatus}</b>\n                        <br />\n                        Is mounted?{' '} <b>{isMounted ? 'Yes' : 'No'}</b>\n                    </div>\n                </div>\n                <Column style={{\n            maxWidth: 600,\n            width: '100%'\n          }} mdxType=\"Column\">\n                    <ToggleButtonComponent expanded={expanded} onClick={() => {\n              transitioningRef.current = true;\n              setExpanded(prev => !prev);\n            }} mdxType=\"ToggleButtonComponent\" />\n                    <CollapsibleContent expanded={expanded} onTransitionStart={() => setTransitionStatus('has started')} onTransitionEnd={() => {\n              transitioningRef.current = false;\n              setTransitionStatus('is over');\n            }} mdxType=\"CollapsibleContent\">\n                        {isMounted ? <TextComponent mdxType=\"TextComponent\" /> : <div></div>}\n                    </CollapsibleContent>\n                </Column>\n            </Column>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}