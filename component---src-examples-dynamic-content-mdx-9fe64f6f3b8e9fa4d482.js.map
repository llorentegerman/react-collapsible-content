{"version":3,"sources":["webpack:///../src/examples/DynamicContent.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Code","Column","CollapsibleContent","ToggleButtonComponent","DynamicText","DynamicChildren","CountdownComponent","React","expanded","setExpanded","delay","style","maxWidth","width","onClick","prev","init","end","className","isMDXComponent"],"mappings":"olBAcO,IAAMA,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,uFACC,mBAAGC,WAAW,KAAQ,CACnB,KAAQ,2CADX,eADD,yEAIA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,wBADD,sBAAX,QAEwC,mBAAGA,WAAW,KAAQ,CAC1D,KAAQ,qBAD4B,mBAFxC,uBAKA,iBAAQ,CACN,GAAM,cADR,cAGA,iGACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0jBAA6jBC,SAAO,GACrmBL,QACAH,kBACAS,eACAC,UACAC,SACAC,gBACAC,uBACAC,0BACAC,gBACAC,oBACAC,wBAXqmB,gBAYrmBjB,IAZqmB,EAarmBH,eAbqmB,GAcpmBO,QAAQ,eACV,WAAM,MAC6Bc,YAAe,GAAxCC,EADJ,KACcC,EADd,KAEH,OAAO,YAAC,SAAD,CAAQhB,QAAQ,UACf,gDAC4B,YAAC,IAAD,CAAoBiB,MAAO,IAAMjB,QAAQ,uBAAwB,IAD7F,iCAIA,YAAC,SAAD,CAAQkB,MAAO,CACnBC,SAAU,IACVC,MAAO,QACNpB,QAAQ,UACD,YAAC,IAAD,CAAuBe,SAAUA,EAAUM,QAAS,kBAAML,GAAY,SAAAM,GAAI,OAAKA,MAAOtB,QAAQ,0BAC9F,YAAC,IAAD,CAAoBe,SAAUA,EAAUf,QAAQ,sBAC5C,YAAC,IAAD,CAAaiB,MAAO,IAAMjB,QAAQ,sBAMtD,iBAAQ,CACN,GAAM,qBADR,qBAGA,kFACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,glBAAmlBC,SAAO,GAC3nBL,QACAH,kBACAS,eACAC,UACAC,SACAC,gBACAC,uBACAC,0BACAC,gBACAC,oBACAC,wBAX2nB,gBAY3nBjB,IAZ2nB,EAa3nBH,eAb2nB,GAc1nBO,QAAQ,eACV,WAAM,MAC6Bc,YAAe,GAAxCC,EADJ,KACcC,EADd,KAEH,OAAO,YAAC,SAAD,CAAQhB,QAAQ,UACf,gDAC4B,YAAC,IAAD,CAAoBiB,MAAO,IAAMjB,QAAQ,uBAAwB,IAD7F,iCAIA,YAAC,SAAD,CAAQkB,MAAO,CACnBC,SAAU,IACVC,MAAO,QACNpB,QAAQ,UACD,YAAC,IAAD,CAAuBe,SAAUA,EAAUM,QAAS,kBAAML,GAAY,SAAAM,GAAI,OAAKA,MAAOtB,QAAQ,0BAC9F,YAAC,IAAD,CAAoBe,SAAUA,EAAUf,QAAQ,sBAC5C,YAAC,IAAD,CAAiBuB,KAAM,EAAGC,IAAK,GAAIP,MAAO,IAAMjB,QAAQ,0BAM5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAMyB,UAAW,MAAOzB,QAAQ,QAAhC,++BAiCA,iBAAQ,CACN,GAAM,mBADR,mBAGA,YAAC,IAAD,CAAMyB,UAAW,MAAOzB,QAAQ,QAAhC,47B,+MAsCJH,EAAW6B,gBAAiB","file":"component---src-examples-dynamic-content-mdx-9fe64f6f3b8e9fa4d482.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/llorentegerman/Documents/code/otros/react-collapsible-content/docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Code } from 'gatsby-theme-docz/src/components/Code';\nimport { Column } from 'simple-flexbox';\nimport CollapsibleContent from 'react-collapsible-content';\nimport ToggleButtonComponent from './common/ToggleButtonComponent';\nimport DynamicText from './common/DynamicText';\nimport DynamicChildren from './common/DynamicChildren';\nimport CountdownComponent from './common/CountdownComponent';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dynamic-content\"\n    }}>{`Dynamic Content`}</h1>\n    <p>{`See how the component behaves when it has dynamic content.\nIn `}<a parentName=\"p\" {...{\n        \"href\": \"/react-collapsible-content/comparisons\"\n      }}>{`comparisons`}</a>{` section you will see how other libraries reacts to the same content.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#countdowncomponent\"\n      }}>{`CountdownComponent`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#dynamicchildren\"\n      }}>{`DynamicChildren`}</a>{` definitions below.`}</p>\n    <h2 {...{\n      \"id\": \"only-child\"\n    }}>{`Only child`}</h2>\n    <p>{`See how the component reacts when the content of its only child changes.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [expanded, setExpanded] = React.useState(true)\\n  return (\\n    <Column>\\n      <p>\\n        Content will change in: <CountdownComponent delay={5000} /> seconds\\n        (refresh to restart).\\n      </p>\\n      <Column style={{ maxWidth: 600, width: \\'100%\\' }}>\\n        <ToggleButtonComponent\\n          expanded={expanded}\\n          onClick={() => setExpanded(prev => !prev)}\\n        />\\n        <CollapsibleContent expanded={expanded}>\\n          <DynamicText delay={5000} />\\n        </CollapsibleContent>\\n      </Column>\\n    </Column>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Code,\n      Column,\n      CollapsibleContent,\n      ToggleButtonComponent,\n      DynamicText,\n      DynamicChildren,\n      CountdownComponent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    {() => {\n        const [expanded, setExpanded] = React.useState(true);\n        return <Column mdxType=\"Column\">\n                <p>\n                    Content will change in: <CountdownComponent delay={5000} mdxType=\"CountdownComponent\" />{' '}\n                    seconds (refresh to restart).\n                </p>\n                <Column style={{\n            maxWidth: 600,\n            width: '100%'\n          }} mdxType=\"Column\">\n                    <ToggleButtonComponent expanded={expanded} onClick={() => setExpanded(prev => !prev)} mdxType=\"ToggleButtonComponent\" />\n                    <CollapsibleContent expanded={expanded} mdxType=\"CollapsibleContent\">\n                        <DynamicText delay={5000} mdxType=\"DynamicText\" />\n                    </CollapsibleContent>\n                </Column>\n            </Column>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"multiple-children\"\n    }}>{`Multiple children`}</h2>\n    <p>{`See how the component reacts when new children are added.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [expanded, setExpanded] = React.useState(true)\\n  return (\\n    <Column>\\n      <p>\\n        Content will change in: <CountdownComponent delay={5000} /> seconds\\n        (refresh to restart).\\n      </p>\\n      <Column style={{ maxWidth: 600, width: \\'100%\\' }}>\\n        <ToggleButtonComponent\\n          expanded={expanded}\\n          onClick={() => setExpanded(prev => !prev)}\\n        />\\n        <CollapsibleContent expanded={expanded}>\\n          <DynamicChildren init={3} end={10} delay={5000} />\\n        </CollapsibleContent>\\n      </Column>\\n    </Column>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Code,\n      Column,\n      CollapsibleContent,\n      ToggleButtonComponent,\n      DynamicText,\n      DynamicChildren,\n      CountdownComponent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    {() => {\n        const [expanded, setExpanded] = React.useState(true);\n        return <Column mdxType=\"Column\">\n                <p>\n                    Content will change in: <CountdownComponent delay={5000} mdxType=\"CountdownComponent\" />{' '}\n                    seconds (refresh to restart).\n                </p>\n                <Column style={{\n            maxWidth: 600,\n            width: '100%'\n          }} mdxType=\"Column\">\n                    <ToggleButtonComponent expanded={expanded} onClick={() => setExpanded(prev => !prev)} mdxType=\"ToggleButtonComponent\" />\n                    <CollapsibleContent expanded={expanded} mdxType=\"CollapsibleContent\">\n                        <DynamicChildren init={3} end={10} delay={5000} mdxType=\"DynamicChildren\" />\n                    </CollapsibleContent>\n                </Column>\n            </Column>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"countdowncomponent\"\n    }}>{`CountdownComponent`}</h2>\n    <Code className={'tsx'} mdxType=\"Code\">\n    {`\nimport React, { useEffect, useRef, useState } from 'react';\nexport default function CountdownComponent({ delay }) {\n    const [counter, setCounter] = useState(delay / 1000);\n    const intervalRef = useRef();\n    useEffect(() => {\n        let mounted = true;\n        const endDate = new Date().getTime() + delay;\n        intervalRef.current = setInterval(() => {\n            let diff =\n                (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n            diff = Math.floor(diff);\n            if (diff <= 0) {\n                clearInterval(intervalRef.current);\n            }\n            setCounter(diff);\n        }, 1000);\n        setTimeout(() => {\n            if (!mounted) {\n                return;\n            }\n            clearInterval(intervalRef.current);\n        }, delay);\n        return () => {\n            mounted = false;\n            clearInterval(intervalRef.current);\n        };\n    }, [delay]);\n    return <span>{counter}</span>;\n}\n `}\n    </Code>\n    <h2 {...{\n      \"id\": \"dynamicchildren\"\n    }}>{`DynamicChildren`}</h2>\n    <Code className={'tsx'} mdxType=\"Code\">\n    {`\nimport React, { useEffect, useState } from 'react';\nconst getArray = (count) => new Array(count).fill().map((_, i) => i + 1);\nexport default function DynamicChildren({ delay = 2000, init = 3, end = 5 }) {\n    const [array, setArray] = useState(getArray(init));\n    useEffect(() => {\n        let mounted = true;\n        setTimeout(() => {\n            if (!mounted) {\n                return;\n            }\n            setArray(getArray(end));\n        }, delay);\n        return () => {\n            mounted = false;\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [delay]);\n    return (\n        <React.Fragment>\n            {array.map((i) => (\n                <div\n                    style={{ backgroundColor: '#2EBFA5', color: 'white' }}\n                    key={i}\n                >\n                    {i}\n                </div>\n            ))}\n        </React.Fragment>\n    );\n}\n`}\n    </Code>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}